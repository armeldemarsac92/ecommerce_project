default:
  image: docker:24.0.5

variables:
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: unix:///var/run/docker.sock
  DOCKER_DRIVER: overlay2
  GIT_DEPTH: 0
  ECR_REPO: "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/t-dev-702/prod"

stages:
  - test
  - build
  - terraform:validate
  - terraform:plan
  - terraform:apply



frontend-test:
  stage: test
  image: cypress/browsers:22.12.0
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - web/**/*
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - web/**/*
  cache:
    key: ${CI_COMMIT_REF_SLUG}-frontend
    paths:
      - web/node_modules/
  before_script:
    - cd $CI_PROJECT_DIR/web
    - yarn install
  script:
    - yarn run lint || true
    - yarn test || true
    - yarn run test:coverage || true
    - yarn dev &
    - sleep 30
    - yarn cypress run --headless
  artifacts:
    when: always
    paths:
      - web/cypress/screenshots/**/*
  allow_failure: true

api-test:
  stage: test
  image: mcr.microsoft.com/dotnet/sdk:8.0
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - api/Tdev702.Api/**/*
        - api/Tdev702.Contracts/**/*
        - api/Tdev702.Repository/**/*
        - api/Tdev702.AWS.SDK/**/*
        - api/Tdev702.Stripe.SDK/**/*
        - api/Tdev702.OpenFoodFact.SDK/**/*
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - api/Tdev702.Api/**/*
        - api/Tdev702.Contracts/**/*
        - api/Tdev702.Repository/**/*
        - api/Tdev702.AWS.SDK/**/*
        - api/Tdev702.Stripe.SDK/**/*
        - api/Tdev702.OpenFoodFact.SDK/**/*
  cache:
    key: ${CI_COMMIT_REF_SLUG}-api
    paths:
      - api/*/obj/
      - api/*/bin/
  before_script:
    - cd $CI_PROJECT_DIR/api
    - dotnet restore
  script:
    - dotnet test ./Tdev702.Api.Tests.Unit/Tdev702.Api.Tests.Unit.csproj
  allow_failure: true

.ecr_login: &ecr_login
  before_script:
    - apk add --no-cache git aws-cli
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_REGION
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO

build-frontend:
  stage: build
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - web/**/*
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - web/**/*
  needs:
    - job: frontend-test
      optional: true
  <<: *ecr_login
  script:
    - cd $CI_PROJECT_DIR/web
    - docker build --load -t t-dev-702-web:latest -f ./Dockerfile .
    - docker tag t-dev-702-web:latest $ECR_REPO/frontend:latest
    - docker push $ECR_REPO/frontend:latest

build-api:
  stage: build
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - api/Tdev702.Api/**/*
        - api/Tdev702.Contracts/**/*
        - api/Tdev702.Repository/**/*
        - api/Tdev702.AWS.SDK/**/*
        - api/Tdev702.Stripe.SDK/**/*
        - api/Tdev702.OpenFoodFact.SDK/**/*
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - api/Tdev702.Api/**/*
        - api/Tdev702.Contracts/**/*
        - api/Tdev702.Repository/**/*
        - api/Tdev702.AWS.SDK/**/*
        - api/Tdev702.Stripe.SDK/**/*
        - api/Tdev702.OpenFoodFact.SDK/**/*
  needs:
    - job: api-test
      optional: true
  <<: *ecr_login
  script:
    - cd $CI_PROJECT_DIR/api
    - docker build --load -t t-dev-702-api:latest -f ./Tdev702.Api/Dockerfile .
    - docker tag t-dev-702-api:latest $ECR_REPO/api:latest
    - docker push $ECR_REPO/api:latest

build-auth:
  stage: build
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - api/Tdev702.Auth/**/*
        - api/Tdev702.Contracts/**/*
        - api/Tdev702.Repository/**/*
        - api/Tdev702.Stripe.SDK/**/*
        - api/Tdev702.AWS.SDK/**/*
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - api/Tdev702.Auth/**/*
        - api/Tdev702.Contracts/**/*
        - api/Tdev702.Repository/**/*
        - api/Tdev702.Stripe.SDK/**/*
        - api/Tdev702.AWS.SDK/**/*
  <<: *ecr_login
  script:
    - cd $CI_PROJECT_DIR/api
    - docker build --load -t t-dev-702-auth:latest -f ./Tdev702.Auth/Dockerfile .
    - docker tag t-dev-702-auth:latest $ECR_REPO/auth:latest
    - docker push $ECR_REPO/auth:latest
      
terraform:validate:
  stage: terraform:validate
  image: alpine:latest
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - api/terraform/**/*
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - api/terraform/**/*
  before_script:
    - apk add --no-cache curl unzip
    - curl -LO https://releases.hashicorp.com/terraform/1.7.4/terraform_1.7.4_linux_amd64.zip
    - unzip terraform_1.7.4_linux_amd64.zip
    - mv terraform /usr/local/bin/
    - cd $CI_PROJECT_DIR/api/terraform
    - terraform init
  script:
    - terraform validate
    - terraform fmt -check

terraform:plan:
  stage: terraform:plan
  image: alpine:latest
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - api/terraform/**/*
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - api/terraform/**/*
  before_script:
    - apk add --no-cache curl unzip aws-cli
    - curl -LO https://releases.hashicorp.com/terraform/1.7.4/terraform_1.7.4_linux_amd64.zip
    - unzip terraform_1.7.4_linux_amd64.zip
    - mv terraform /usr/local/bin/
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_REGION
    - cd $CI_PROJECT_DIR/api/terraform
    - terraform init
  script:
    - terraform plan -out=tfplan
    - terraform show -no-color tfplan > tfplan.txt
  artifacts:
    paths:
      - api/terraform/tfplan
      - api/terraform/tfplan.txt
    expire_in: 1 week

post_terraform_plan:
  stage: terraform:plan
  image: alpine:latest
  needs: ["terraform:plan"]
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - api/terraform/**/*
      when: on_success
  script:
    - apk add --no-cache curl jq
    - cd $CI_PROJECT_DIR/api/terraform
    - PLAN_CONTENT=$(cat tfplan.txt | sed 's/"/\\"/g' | tr '\n' ' ')
    - |
      COMMENT_BODY=$(cat << EOF
      ## Terraform Plan Results
      
      <details>
      <summary>Expand to view plan</summary>
      
      \`\`\`terraform
      $PLAN_CONTENT
      \`\`\`
      
      </details>
      
      Review the plan and approve this MR to apply these changes.
      EOF
      )
    - 'curl --location --request POST "https://gitlab.com/api/v4/projects/$CI_MERGE_REQUEST_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID/notes" --header "PRIVATE-TOKEN: $GITLAB_API_TOKEN" --header "Content-Type: application/json" --data-raw "{ \"body\": \"$COMMENT_BODY\" }"'

terraform:apply:
  stage: terraform:apply
  image: alpine:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - api/terraform/**/*
      when: manual
  before_script:
    - apk add --no-cache curl unzip aws-cli
    - curl -LO https://releases.hashicorp.com/terraform/1.7.4/terraform_1.7.4_linux_amd64.zip
    - unzip terraform_1.7.4_linux_amd64.zip
    - mv terraform /usr/local/bin/
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_REGION
    - cd $CI_PROJECT_DIR/api/terraform
    - terraform init
  script:
    - terraform apply -auto-approve
  environment:
    name: production
    on_stop: terraform:destroy

terraform:destroy:
  stage: terraform:apply
  image: alpine:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - api/terraform/**/*
      when: manual
  before_script:
    - apk add --no-cache curl unzip aws-cli
    - curl -LO https://releases.hashicorp.com/terraform/1.7.4/terraform_1.7.4_linux_amd64.zip
    - unzip terraform_1.7.4_linux_amd64.zip
    - mv terraform /usr/local/bin/
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_REGION
    - cd $CI_PROJECT_DIR/api/terraform
    - terraform init
  script:
    - terraform destroy -auto-approve
  environment:
    name: production
    action: stop