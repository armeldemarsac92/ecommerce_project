default:
  image: docker:24.0.5

services:
  - docker:24.0.5-dind

# Required CI/CD Variables (must be set in GitLab UI):
# - AWS_ACCESS_KEY_ID: AWS access key with ECR permissions
# - AWS_SECRET_ACCESS_KEY: AWS secret key
# - AWS_REGION: AWS region for ECR
# - AWS_ACCOUNT_ID: AWS account ID
# - TRIGGER_TOKEN: Token for triggering infrastructure pipeline

variables:
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_DRIVER: overlay2
  GIT_DEPTH: 0
  
  ECR_REPO: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/tdev700"
  
  INFRA_PROJECT_ID: "67593851"
  INFRA_TRIGGER_TOKEN: "${TRIGGER_TOKEN}"
  
  STAGING_API_URL: "https://api-staging.epitechproject.fr/api/v1"
  STAGING_AUTH_URL: "https://auth-staging.epitechproject.fr/api"
  PRODUCTION_API_URL: "https://api.epitechproject.fr/api/v1"
  PRODUCTION_AUTH_URL: "https://auth.epitechproject.fr/api"

.validate_variables:
  image: alpine:latest
  script:
    - |
      echo "Validating required variables..."
      for var in AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_REGION AWS_ACCOUNT_ID; do
        value=$(eval echo \$$var)
        if [ -z "$value" ]; then
          echo "ERROR: $var is not set"
          exit 1
        fi
      done
  rules:
    - if: $CI_COMMIT_BRANCH == "staging" || $CI_COMMIT_BRANCH == "main"

.ecr_login: &ecr_login
  before_script:
    - apk add --no-cache --quiet git aws-cli
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_REGION
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO

.build_frontend_template: &build_frontend
  <<: *ecr_login
  script:
    - cd $CI_PROJECT_DIR/web
    - >
      docker build --load 
      --build-arg NEXT_PUBLIC_API_BASE_URL=$API_URL
      --build-arg NEXT_PUBLIC_AUTH_BASE_URL=$AUTH_URL
      -t $IMAGE_TAG_PREFIX:$CI_COMMIT_SHA
      -f ./Dockerfile .
    - docker tag $IMAGE_TAG_PREFIX:$CI_COMMIT_SHA $ECR_REPO/$ENV_PREFIX/frontend:$CI_COMMIT_SHA
    - docker tag $IMAGE_TAG_PREFIX:$CI_COMMIT_SHA $ECR_REPO/$ENV_PREFIX/frontend:latest
    - docker push $ECR_REPO/$ENV_PREFIX/frontend:$CI_COMMIT_SHA
    - docker push $ECR_REPO/$ENV_PREFIX/frontend:latest
    - echo "CI_COMMIT_SHA=$CI_COMMIT_SHA" >> $CI_PROJECT_DIR/build_info.env
    - echo "ENV_PREFIX=$ENV_PREFIX" >> $CI_PROJECT_DIR/build_info.env
    - echo "COMPONENT=frontend" >> $CI_PROJECT_DIR/build_info.env
  artifacts:
    reports:
      dotenv: build_info.env

.build_api_template: &build_api
  <<: *ecr_login
  script:
    - cd $CI_PROJECT_DIR/api
    - docker build --load -t $IMAGE_TAG_PREFIX:$CI_COMMIT_SHA -f ./Tdev702.Api/Dockerfile .
    - docker tag $IMAGE_TAG_PREFIX:$CI_COMMIT_SHA $ECR_REPO/$ENV_PREFIX/api:$CI_COMMIT_SHA
    - docker tag $IMAGE_TAG_PREFIX:$CI_COMMIT_SHA $ECR_REPO/$ENV_PREFIX/api:latest
    - docker push $ECR_REPO/$ENV_PREFIX/api:$CI_COMMIT_SHA
    - docker push $ECR_REPO/$ENV_PREFIX/api:latest
    - echo "CI_COMMIT_SHA=$CI_COMMIT_SHA" >> $CI_PROJECT_DIR/build_info.env
    - echo "ENV_PREFIX=$ENV_PREFIX" >> $CI_PROJECT_DIR/build_info.env
    - echo "COMPONENT=api" >> $CI_PROJECT_DIR/build_info.env
  artifacts:
    reports:
      dotenv: build_info.env

.build_auth_template: &build_auth
  <<: *ecr_login
  script:
    - cd $CI_PROJECT_DIR/api
    - docker build --load -t $IMAGE_TAG_PREFIX:$CI_COMMIT_SHA -f ./Tdev702.Auth/Dockerfile .
    - docker tag $IMAGE_TAG_PREFIX:$CI_COMMIT_SHA $ECR_REPO/$ENV_PREFIX/auth:$CI_COMMIT_SHA
    - docker tag $IMAGE_TAG_PREFIX:$CI_COMMIT_SHA $ECR_REPO/$ENV_PREFIX/auth:latest
    - docker push $ECR_REPO/$ENV_PREFIX/auth:$CI_COMMIT_SHA
    - docker push $ECR_REPO/$ENV_PREFIX/auth:latest
    - echo "CI_COMMIT_SHA=$CI_COMMIT_SHA" >> $CI_PROJECT_DIR/build_info.env
    - echo "ENV_PREFIX=$ENV_PREFIX" >> $CI_PROJECT_DIR/build_info.env
    - echo "COMPONENT=auth" >> $CI_PROJECT_DIR/build_info.env
  artifacts:
    reports:
      dotenv: build_info.env

.security_scan_template: &security_scan
  image: docker:24.0.5  
  services:
    - name: docker:24.0.5-dind
      entrypoint: ["env", "-u", "DOCKER_HOST"]
      command: ["dockerd-entrypoint.sh"]
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - apk add --no-cache --quiet git aws-cli wget
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_REGION
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO
    
    - export TRIVY_VERSION=$(wget -qO - "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    - wget --quiet https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxf -
  script:
    - echo $ECR_REPO
    - echo $ENV_PREFIX
    - echo $COMPONENT
    - echo $CI_COMMIT_SHA
    - docker pull $ECR_REPO/$ENV_PREFIX/$COMPONENT:$CI_COMMIT_SHA
    - ./trivy image --severity HIGH,CRITICAL --ignore-unfixed --scanners vuln,secret --timeout 10m --exit-code 0 --format table --cache-dir .trivycache/ --no-progress --quiet $ECR_REPO/$ENV_PREFIX/$COMPONENT:$CI_COMMIT_SHA
  cache:
    key: trivy-cache-${CI_COMMIT_REF_SLUG}
    paths:
      - .trivycache/
  allow_failure: true

# Jobs

validate-variables:
  extends: .validate_variables

frontend-test:
  image: node:18-alpine
  script:
    - cd $CI_PROJECT_DIR/web
    - npm ci
    - npm run lint
    - npm test
  cache:
    key: ${CI_COMMIT_REF_SLUG}-frontend
    paths:
      - web/node_modules/
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
      changes:
        - web/**/*

api-test:
  image: mcr.microsoft.com/dotnet/sdk:8.0
  script:
    - cd $CI_PROJECT_DIR/api
    - dotnet restore
    - dotnet build --no-restore
    - dotnet test --no-build
  cache:
    key: ${CI_COMMIT_REF_SLUG}-api
    paths:
      - api/**/.nuget/
      - api/**/obj/
      - api/**/bin/
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
      changes:
        - api/Tdev702.Api/**/*

build-frontend-staging:
  variables:
    IMAGE_TAG_PREFIX: "t-dev-702-web-staging"
    ENV_PREFIX: "staging"
    API_URL: $STAGING_API_URL
    AUTH_URL: $STAGING_AUTH_URL
  <<: *build_frontend
  needs:
    - job: frontend-test
      optional: true
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
      changes:
        - web/**/*

scan-frontend-staging:
  <<: *security_scan
  needs:
    - job: build-frontend-staging
      artifacts: true
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
      changes:
        - web/**/*

build-api-staging:
  variables:
    IMAGE_TAG_PREFIX: "t-dev-702-api-staging"
    ENV_PREFIX: "staging"
  <<: *build_api
  needs:
    - job: api-test
      optional: true
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
      changes:
        - api/Tdev702.Api/**/*
        - api/Tdev702.Contracts/**/*
        - api/Tdev702.Repository/**/*
        - api/Tdev702.AWS.SDK/**/*
        - api/Tdev702.Stripe.SDK/**/*
        - api/Tdev702.OpenFoodFact.SDK/**/*
  artifacts:
    reports:
      dotenv: build_info.env

scan-api-staging:
  <<: *security_scan
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
      changes:
        - api/Tdev702.Api/**/*
        - api/Tdev702.Contracts/**/*
        - api/Tdev702.Repository/**/*
        - api/Tdev702.AWS.SDK/**/*
        - api/Tdev702.Stripe.SDK/**/*
        - api/Tdev702.OpenFoodFact.SDK/**/*
  needs:
    - job: build-api-staging
      artifacts: true

build-auth-staging:
  variables:
    IMAGE_TAG_PREFIX: "t-dev-702-auth-staging"
    ENV_PREFIX: "staging"
  <<: *build_auth
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
      changes:
        - api/Tdev702.Auth/**/*
        - api/Tdev702.Contracts/**/*
        - api/Tdev702.Repository/**/*
        - api/Tdev702.Stripe.SDK/**/*
        - api/Tdev702.AWS.SDK/**/*
  artifacts:
    reports:
      dotenv: build_info.env

scan-auth-staging:
  variables:
    ENV_PREFIX: "staging"
    COMPONENT: "auth"
  <<: *security_scan
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
      changes:
        - api/Tdev702.Auth/**/*
        - api/Tdev702.Contracts/**/*
        - api/Tdev702.Repository/**/*
        - api/Tdev702.Stripe.SDK/**/*
        - api/Tdev702.AWS.SDK/**/*
  needs:
    - job: build-auth-staging
      artifacts: true

trigger-infra-staging:
  needs:
    - job: build-frontend-staging
      optional: true
      artifacts: true
    - job: build-api-staging
      optional: true
      artifacts: true
    - job: build-auth-staging
      optional: true
      artifacts: true
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  before_script:
    - apk add --no-cache curl jq
  script:
    - echo "Triggering infrastructure pipeline for staging environment"
    - API_TAG=${API_IMAGE:-$CI_COMMIT_SHA}
    - AUTH_TAG=${AUTH_IMAGE:-$CI_COMMIT_SHA}
    - FRONTEND_TAG=${FRONTEND_IMAGE:-$CI_COMMIT_SHA}
    - 'curl --request POST --form "token=$INFRA_TRIGGER_TOKEN" --form "ref=main" --form "variables[ENVIRONMENT]=staging" "https://gitlab.com/api/v4/projects/$INFRA_PROJECT_ID/trigger/pipeline" > pipeline_response.json'
    - cat pipeline_response.json
    - 'export INFRA_PIPELINE_ID=$(cat pipeline_response.json | jq -r ".id")'
    - 'if [ "$INFRA_PIPELINE_ID" == "null" ]; then echo "Failed to trigger infrastructure pipeline"; exit 1; fi'
    - echo "INFRA_PIPELINE_ID=$INFRA_PIPELINE_ID" >> infra_pipeline.env
  artifacts:
    reports:
      dotenv: infra_pipeline.env

integration-test-staging:
  image: cypress/included:latest
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger"
      when: always
  script:
    - mkdir -p integration-tests/test-results
    - cd $CI_PROJECT_DIR/integration-tests
    - npm ci
    - npm run test:ci
  artifacts:
    paths:
      - integration-tests/test-results/
      - integration-tests/screenshots/
      - integration-tests/videos/
    reports:
      junit: integration-tests/test-results/junit.xml
    expire_in: 1 week
    when: always
  cache:
    key: ${CI_COMMIT_REF_SLUG}-integration-tests
    paths:
      - integration-tests/node_modules/

manual-approval-production:
  image: alpine:latest
  needs:
    - integration-test-staging
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger" && $ENVIRONMENT == "staging"
      when: on_success
  script:
    - echo "Manually approved for production deployment"
  when: manual
  allow_failure: false

build-frontend-production:
  variables:
    IMAGE_TAG_PREFIX: "t-dev-702-web-production"
    ENV_PREFIX: "production"
    API_URL: $PRODUCTION_API_URL
    AUTH_URL: $PRODUCTION_AUTH_URL
  <<: *build_frontend
  needs:
    - manual-approval-production
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger" && $ENVIRONMENT == "staging"
      when: on_success
      changes:
        - web/**/*

# Frontend scan
scan-frontend-production:
  variables:
    ENV_PREFIX: "production"
    COMPONENT: "frontend"
  <<: *security_scan
  needs:
    - job: build-frontend-production
      optional: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger" && $ENVIRONMENT == "staging"
      when: on_success
      changes:
        - web/**/*

build-api-production:
  variables:
    IMAGE_TAG_PREFIX: "t-dev-702-api-production"
    ENV_PREFIX: "production"
  <<: *build_api
  needs:
    - manual-approval-production
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger" && $ENVIRONMENT == "staging"
      when: on_success
      changes:
        - api/Tdev702.Api/**/*
        - api/Tdev702.Contracts/**/*
        - api/Tdev702.Repository/**/*
        - api/Tdev702.AWS.SDK/**/*
        - api/Tdev702.Stripe.SDK/**/*
        - api/Tdev702.OpenFoodFact.SDK/**/*

# API scan
scan-api-production:
  variables:
    ENV_PREFIX: "production"
    COMPONENT: "api"
  <<: *security_scan
  needs:
    - job: build-api-production
      optional: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger" && $ENVIRONMENT == "staging"
      when: on_success
      changes:
        - api/Tdev702.Api/**/*
        - api/Tdev702.Contracts/**/*
        - api/Tdev702.Repository/**/*
        - api/Tdev702.AWS.SDK/**/*
        - api/Tdev702.Stripe.SDK/**/*
        - api/Tdev702.OpenFoodFact.SDK/**/*

build-auth-production:
  variables:
    IMAGE_TAG_PREFIX: "t-dev-702-auth-production"
    ENV_PREFIX: "production"
  <<: *build_auth
  needs:
    - manual-approval-production
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger" && $ENVIRONMENT == "staging"
      when: on_success
      changes:
        - api/Tdev702.Auth/**/*
        - api/Tdev702.Contracts/**/*
        - api/Tdev702.Repository/**/*
        - api/Tdev702.Stripe.SDK/**/*
        - api/Tdev702.AWS.SDK/**/*

# Auth scan
scan-auth-production:
  variables:
    ENV_PREFIX: "production"
    COMPONENT: "auth"
  <<: *security_scan
  needs:
    - job: build-auth-production
      optional: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger" && $ENVIRONMENT == "staging"
      when: on_success
      changes:
        - api/Tdev702.Auth/**/*
        - api/Tdev702.Contracts/**/*
        - api/Tdev702.Repository/**/*
        - api/Tdev702.Stripe.SDK/**/*
        - api/Tdev702.AWS.SDK/**/*

#trigger-infra-production:
#  stage: deploy-infra-production
#  needs:
#    - job: build-frontend-production
#      optional: true
#      artifacts: true
#    - job: build-api-production
#      optional: true
#      artifacts: true
#    - job: build-auth-production
#      optional: true
#      artifacts: true
#  rules:
#    - if: $CI_COMMIT_BRANCH == "staging"
#  before_script:
#    - apk add --no-cache curl jq
#  script:
#    - echo "Triggering infrastructure pipeline for production environment"
#    - API_TAG=${API_IMAGE:-$CI_COMMIT_SHA}
#    - AUTH_TAG=${AUTH_IMAGE:-$CI_COMMIT_SHA}
#    - FRONTEND_TAG=${FRONTEND_IMAGE:-$CI_COMMIT_SHA}
#    - 'curl --request POST --form "token=$INFRA_TRIGGER_TOKEN" --form "ref=main" --form "variables[ENVIRONMENT]=production" --form "variables[API_IMAGE_TAG]=$API_TAG" --form "variables[AUTH_IMAGE_TAG]=$AUTH_TAG" --form "variables[FRONTEND_IMAGE_TAG]=$FRONTEND_TAG" "https://gitlab.com/api/v4/projects/$INFRA_PROJECT_ID/trigger/pipeline" > pipeline_response.json'
#    - cat pipeline_response.json
#    - 'export INFRA_PIPELINE_ID=$(cat pipeline_response.json | jq -r ".id")'
#    - 'if [ "$INFRA_PIPELINE_ID" == "null" ]; then echo "Failed to trigger infrastructure pipeline"; exit 1; fi'
#    - echo "INFRA_PIPELINE_ID=$INFRA_PIPELINE_ID" >> infra_pipeline.env
#  artifacts:
#    reports:
#      dotenv: infra_pipeline.env