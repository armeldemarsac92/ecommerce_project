default:
  image: docker:24.0.5

services:
  - docker:24.0.5-dind

variables:
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_DRIVER: overlay2
  GIT_DEPTH: 0
  ECR_REPO: "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/tdev700"
  INFRA_PROJECT_ID: "67593851" # Replace with your infrastructure repository project ID
  INFRA_TRIGGER_TOKEN: ${TRIGGER_TOKEN} # Set this in GitLab CI/CD variables
  

stages:
  - test
  - build-staging
  - deploy-infra-staging
  - wait-for-infra-staging
  - integration-test-staging
  - build-production

.ecr_login: &ecr_login
  before_script:
    - apk add --no-cache git aws-cli
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_REGION
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO

frontend-test:
  stage: test
  script:
    - echo "Running frontend tests..."

api-test:
  stage: test
  script:
    - echo "Running API tests..."

build-frontend-staging:
  stage: build-staging
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
#      changes:
#        - web/**/*
  needs:
    - job: frontend-test
      optional: true
  <<: *ecr_login
  script:
    - cd $CI_PROJECT_DIR/web
    - >
      docker build --load 
      --build-arg NEXT_PUBLIC_API_BASE_URL=https://api.staging.epitechproject.fr/api/v1
      --build-arg NEXT_PUBLIC_AUTH_BASE_URL=https://auth.staging.epitechproject.fr/api
      -t t-dev-702-web-staging:$CI_COMMIT_SHA
      -f ./Dockerfile .
    - docker tag t-dev-702-web-staging:$CI_COMMIT_SHA $ECR_REPO/staging/frontend:$CI_COMMIT_SHA
    - docker tag t-dev-702-web-staging:$CI_COMMIT_SHA $ECR_REPO/staging/frontend:latest
    - docker push $ECR_REPO/staging/frontend:$CI_COMMIT_SHA
    - docker push $ECR_REPO/staging/frontend:latest

build-api-staging:
  stage: build-staging
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
#      changes:
#        - api/Tdev702.Api/**/*
#        - api/Tdev702.Contracts/**/*
#        - api/Tdev702.Repository/**/*
#        - api/Tdev702.AWS.SDK/**/*
#        - api/Tdev702.Stripe.SDK/**/*
#        - api/Tdev702.OpenFoodFact.SDK/**/*
  needs:
    - job: api-test
      optional: true
  <<: *ecr_login
  script:
    - cd $CI_PROJECT_DIR/api
    - docker build --load -t t-dev-702-api-staging:$CI_COMMIT_SHA -f ./Tdev702.Api/Dockerfile .
    - docker tag t-dev-702-api-staging:$CI_COMMIT_SHA $ECR_REPO/staging/api:$CI_COMMIT_SHA
    - docker tag t-dev-702-api-staging:$CI_COMMIT_SHA $ECR_REPO/staging/api:latest
    - docker push $ECR_REPO/staging/api:$CI_COMMIT_SHA
    - docker push $ECR_REPO/staging/api:latest

build-auth-staging:
  stage: build-staging
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
#      changes:
#        - api/Tdev702.Auth/**/*
#        - api/Tdev702.Contracts/**/*
#        - api/Tdev702.Repository/**/*
#        - api/Tdev702.Stripe.SDK/**/*
#        - api/Tdev702.AWS.SDK/**/*
  <<: *ecr_login
  script:
    - cd $CI_PROJECT_DIR/api
    - docker build --load -t t-dev-702-auth-staging:$CI_COMMIT_SHA -f ./Tdev702.Auth/Dockerfile .
    - docker tag t-dev-702-auth-staging:$CI_COMMIT_SHA $ECR_REPO/staging/auth:$CI_COMMIT_SHA
    - docker tag t-dev-702-auth-staging:$CI_COMMIT_SHA $ECR_REPO/staging/auth:latest
    - docker push $ECR_REPO/staging/auth:$CI_COMMIT_SHA
    - docker push $ECR_REPO/staging/auth:latest

trigger-infra-staging:
  stage: deploy-infra-staging
  needs:
    - job: build-frontend-staging
      optional: true
    - job: build-api-staging
      optional: true
    - job: build-auth-staging
      optional: true
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  before_script:
    - apk add --no-cache curl jq
  script:
    - echo "Triggering infrastructure pipeline for staging environment"
    - 'curl --request POST --form "token=$INFRA_TRIGGER_TOKEN" --form "ref=main" --form "variables[ENVIRONMENT]=staging" --form "variables[API_IMAGE_TAG]=$CI_COMMIT_SHA" --form "variables[AUTH_IMAGE_TAG]=$CI_COMMIT_SHA" --form "variables[FRONTEND_IMAGE_TAG]=$CI_COMMIT_SHA" "https://gitlab.com/api/v4/projects/$INFRA_PROJECT_ID/trigger/pipeline" > pipeline_response.json'
    - cat pipeline_response.json
    - 'export INFRA_PIPELINE_ID=$(cat pipeline_response.json | jq -r ".id")'
    - 'if [ "$INFRA_PIPELINE_ID" == "null" ]; then echo "Failed to trigger infrastructure pipeline"; exit 1; fi'
    - echo "INFRA_PIPELINE_ID=$INFRA_PIPELINE_ID" >> variables.env
  artifacts:
    reports:
      dotenv: variables.env

wait-for-infra-staging:
  stage: wait-for-infra-staging
  needs:
    - trigger-infra-staging
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  before_script:
    - apk add --no-cache curl jq
  script:
    - echo "Waiting for infrastructure pipeline $INFRA_PIPELINE_ID to complete..."
    - |
      status="pending"
      max_retries=30
      retries=0
      
      while [ "$status" != "success" ] && [ "$status" != "failed" ] && [ "$status" != "canceled" ]; do
        sleep 30
        retries=$((retries+1))
      
        if [ $retries -gt $max_retries ]; then
          echo "Timeout waiting for infrastructure pipeline"
          exit 1
        fi
      
        status=$(curl --silent --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" \
          "https://gitlab.com/api/v4/projects/$INFRA_PROJECT_ID/pipelines/$INFRA_PIPELINE_ID" | jq -r '.status')
        echo "Infrastructure pipeline status: $status (retry $retries/$max_retries)"
      done
      
      if [ "$status" != "success" ]; then
        echo "Infrastructure pipeline did not complete successfully"
        exit 1
      fi
      
      echo "Infrastructure pipeline completed successfully. Staging environment is ready for testing."
      # Give extra time for services to start
      sleep 30

integration-test-staging:
  stage: integration-test-staging
  needs:
    - wait-for-infra-staging
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  script:
    - echo "Running integration tests against staging environment..."
  artifacts:
    paths:
      - integration-tests/test-results/
    reports:
      junit: integration-tests/test-results/junit.xml
    when: always

build-frontend-production:
  stage: build-production
  rules:
    - if: $CI_COMMIT_BRANCH == "staging" && $CI_PIPELINE_SOURCE == "push"
      when: on_success
  needs:
    - integration-test-staging
  <<: *ecr_login
  script:
    - cd $CI_PROJECT_DIR/web
    - >
      docker build --load 
      --build-arg NEXT_PUBLIC_API_BASE_URL=https://api.epitechproject.fr/api/v1
      --build-arg NEXT_PUBLIC_AUTH_BASE_URL=https://auth.epitechproject.fr/api
      -t t-dev-702-web-production:$CI_COMMIT_SHA
      -f ./Dockerfile .
    - docker tag t-dev-702-web-staging:$CI_COMMIT_SHA $ECR_REPO/production/frontend:$CI_COMMIT_SHA
    - docker tag t-dev-702-web-staging:$CI_COMMIT_SHA $ECR_REPO/production/frontend:latest
    - docker push $ECR_REPO/production/frontend:$CI_COMMIT_SHA
    - docker push $ECR_REPO/production/frontend:latest

build-api-production:
  stage: build-production
  rules:
    - if: $CI_COMMIT_BRANCH == "staging" && $CI_PIPELINE_SOURCE == "push"
      when: on_success
  needs:
    - integration-test-staging
  <<: *ecr_login
  script:
    - cd $CI_PROJECT_DIR/api
    - docker build --load -t t-dev-702-api-production:$CI_COMMIT_SHA -f ./Tdev702.Api/Dockerfile .
    - docker tag t-dev-702-api-production:$CI_COMMIT_SHA $ECR_REPO/production/api:$CI_COMMIT_SHA
    - docker tag t-dev-702-api-production:$CI_COMMIT_SHA $ECR_REPO/production/api:latest
    - docker push $ECR_REPO/production/api:$CI_COMMIT_SHA
    - docker push $ECR_REPO/production/api:latest

build-auth-production:
  stage: build-production
  rules:
    - if: $CI_COMMIT_BRANCH == "staging" && $CI_PIPELINE_SOURCE == "push"
      when: on_success
  needs:
    - integration-test-staging
  <<: *ecr_login
  script:
    - cd $CI_PROJECT_DIR/api
    - docker build --load -t t-dev-702-auth-production:$CI_COMMIT_SHA -f ./Tdev702.Auth/Dockerfile .
    - docker tag t-dev-702-auth-production:$CI_COMMIT_SHA $ECR_REPO/production/auth:$CI_COMMIT_SHA
    - docker tag t-dev-702-auth-production:$CI_COMMIT_SHA $ECR_REPO/production/auth:latest
    - docker push $ECR_REPO/production/auth:$CI_COMMIT_SHA
    - docker push $ECR_REPO/production/auth:latest